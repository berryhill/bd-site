---
export const prerender = false;

import { getLiveCollection } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Socials from "@/components/Socials.astro";
import LinkButton from "@/components/LinkButton.astro";
import Card from "@/components/Card.astro";
import Hr from "@/components/Hr.astro";
import PillarModal from "@/components/PillarModal.astro";
import getSortedPosts from "@/utils/getSortedPosts";
import IconRss from "@/assets/icons/IconRss.svg";
import IconArrowRight from "@/assets/icons/IconArrowRight.svg";
import { SITE } from "@/config";
import { SOCIALS } from "@/constants";

const { entries: posts } = await getLiveCollection("liveBlog");

const sortedPosts = getSortedPosts(posts || []);
const featuredPosts = sortedPosts.filter(({ data }) => data.featured);
const recentPosts = sortedPosts.filter(({ data }) => !data.featured);
---

<Layout>
  <Header />
  <main id="main-content" data-layout="index" class="max-w-6xl mx-auto px-4 sm:px-6">
    <!-- Hero Section -->
    <section id="hero" class="pt-8 pb-4 max-w-4xl relative">
      <div class="hero-content relative">
        <h1 class="text-lg md:text-xl font-mono font-bold mb-4 tracking-tight flex items-center flex-wrap gap-1">
          <span class="terminal-prompt">$</span>
          <span id="typed-text" class="ml-2"></span>
          <span class="cursor-blink" id="typing-cursor"> _</span>
        </h1>

        <div class="space-y-2 mb-4">
          <p class="text-base md:text-lg leading-relaxed text-skin-base">
            Welcome to my corner of the internet where I explore agentic-first development,
            AI/ML systems, blockchain technologies, crypto markets, digital music, and intelligent automation.
          </p>
          <p class="text-sm md:text-base leading-relaxed text-skin-muted">
            Beyond the stack lies the shift — a new cultural operating system where creativity, governance, and decision-making are rewritten by agentic systems. The question isn't just what we build, but what kind of world that code creates. As the barrier between intent and manifestation dissolves, the act of creation itself becomes instantaneous — transforming how we design, trade, teach, and govern.
          </p>
        </div>

        <!-- RSS Feed and Social Links -->
        <div class="flex items-center gap-3 flex-wrap text-sm link-container">
          <a
            target="_blank"
            href="/rss.xml"
            class="inline-flex items-center gap-1.5 link-hover"
            aria-label="rss feed"
          >
            <IconRss width={16} height={16} />
            <span>RSS Feed</span>
          </a>
          {
            SOCIALS.length > 0 && (
              <>
                <span class="text-skin-muted">|</span>
                <div class="flex items-center gap-2">
                  <span class="text-skin-muted">Follow:</span>
                  <Socials />
                </div>
              </>
            )
          }
        </div>
      </div>
    </section>

    <style>
      .terminal-prompt {
        color: var(--accent);
        font-weight: 700;
        text-shadow: 0 0 10px rgba(59, 130, 246, 0.3);
      }

      .cycle-word {
        color: var(--foreground);
        position: relative;
        transition: all 0.3s ease;
      }

      .highlight-word {
        color: #d91c5c !important;
        font-weight: 700;
      }

      .cycle-word:hover {
        color: var(--accent);
        transform: translateY(-2px);
      }

      .cycle-word.pillar-clickable {
        cursor: pointer;
        user-select: none;
      }

      .cycle-word.pillar-clickable:hover {
        text-decoration: underline;
        text-underline-offset: 4px;
      }

      .cycle-word.highlight {
        color: #d91c5c !important;
        font-weight: 700;
      }

      .arrow {
        color: var(--foreground-muted);
        opacity: 0.4;
        font-size: 0.9em;
      }

      .cursor-blink {
        color: var(--accent);
        animation: blink 1s step-end infinite;
        font-weight: 700;
      }

      @keyframes blink {
        0%, 50% { opacity: 1; }
        51%, 100% { opacity: 0; }
      }

      .link-hover {
        color: var(--accent);
        transition: all 0.2s ease;
        position: relative;
      }

      .link-hover::after {
        content: '';
        position: absolute;
        bottom: -2px;
        left: 0;
        width: 0;
        height: 2px;
        background: var(--accent);
        transition: width 0.3s ease;
      }

      .link-hover:hover::after {
        width: 100%;
      }

      .link-hover:hover {
        transform: translateX(2px);
      }

      .hero-content {
        animation: fadeInUp 0.6s ease-out;
      }

      @keyframes fadeInUp {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
    </style>

    <Hr />

    {
      featuredPosts.length > 0 && (
        <>
          <!-- Featured Posts Section -->
          <section id="featured" class="pt-4 pb-4 section-animate">
            <h2 class="text-xl font-bold mb-4 text-skin-accent">
              Featured Posts
            </h2>

            <ul class="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6 list-none">
              {featuredPosts.map((data) => (
                <Card variant="h2" {...data} />
              ))}
            </ul>
          </section>
          <Hr />
        </>
      )
    }

    {
      recentPosts.length > 0 && (
        <!-- Recent Posts Section -->
        <section id="recent-posts" class="pt-4 pb-4 section-animate">
          <h2 class="text-xl font-bold mb-4 text-skin-accent">
            Recent Posts
          </h2>

          <ul class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 list-none">
            {recentPosts.map(
              (data, index) =>
                index < SITE.postPerIndex && <Card variant="h3" {...data} />
            )}
          </ul>
        </section>
      )
    }

    <style>
      .section-animate {
        animation: slideInUp 0.5s ease-out;
      }

      @keyframes slideInUp {
        from {
          opacity: 0;
          transform: translateY(30px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .section-header-fancy {
        margin-bottom: 1.5rem;
      }

      .gradient-title {
        background: linear-gradient(135deg, var(--accent) 0%, var(--foreground) 50%, var(--accent) 100%);
        background-size: 200% auto;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        animation: shimmer 3s linear infinite;
        position: relative;
        padding-bottom: 0.5rem;
      }

      .gradient-title::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 2px;
        background: linear-gradient(90deg, var(--accent), transparent);
        animation: expandWidth 1s ease-out;
      }

      .title-glow {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 120%;
        height: 120%;
        background: radial-gradient(circle, var(--accent) 0%, transparent 70%);
        opacity: 0.15;
        filter: blur(20px);
        z-index: -1;
        animation: pulse 2s ease-in-out infinite;
      }

      @keyframes shimmer {
        0% {
          background-position: 0% center;
        }
        100% {
          background-position: 200% center;
        }
      }

      @keyframes expandWidth {
        from {
          width: 0%;
        }
        to {
          width: 100%;
        }
      }

      @keyframes pulse {
        0%, 100% {
          opacity: 0.15;
          transform: translate(-50%, -50%) scale(1);
        }
        50% {
          opacity: 0.25;
          transform: translate(-50%, -50%) scale(1.1);
        }
      }
    </style>

    <!-- View All Posts CTA -->
    <div class="my-12 text-center">
      <LinkButton href="/posts/" class="text-lg px-8 py-3">
        View All Posts
        <IconArrowRight class="inline-block rtl:-rotate-180 ml-2" />
      </LinkButton>
    </div>
  </main>
  <Footer />
  <PillarModal />
</Layout>

<script>
  document.addEventListener("astro:page-load", () => {
    const indexLayout = (document.querySelector("#main-content") as HTMLElement)
      ?.dataset?.layout;
    if (indexLayout) {
      sessionStorage.setItem("backUrl", "/");
    }

    // Typing animation
    const typedTextElement = document.getElementById("typed-text");
    const cursorElement = document.getElementById("typing-cursor");

    if (typedTextElement && cursorElement) {
      const words = [
        { text: "spec", class: "cycle-word pillar-clickable", pillar: "spec" },
        { text: " → ", class: "arrow" },
        { text: "build", class: "cycle-word pillar-clickable", pillar: "build" },
        { text: " → ", class: "arrow" },
        { text: "play", class: "cycle-word pillar-clickable", pillar: "play" },
        { text: " → ", class: "arrow" },
        { text: "repeat", class: "cycle-word highlight" }
      ];

      let wordIndex = 0;
      let charIndex = 0;
      const typingSpeed = 40; // milliseconds per character
      const wordDelay = 50; // pause between words

      function typeText() {
        if (wordIndex < words.length) {
          const currentWord = words[wordIndex];

          if (charIndex === 0) {
            // Create a new span for this word/arrow
            const span = document.createElement("span");
            span.className = currentWord.class;
            span.dataset.wordIndex = wordIndex.toString();

            // Add pillar data attribute if this is a clickable pillar
            if (currentWord.pillar) {
              span.dataset.pillar = currentWord.pillar;
            }

            typedTextElement?.appendChild(span);
          }

          const currentSpan = typedTextElement?.querySelector(
            `[data-word-index="${wordIndex}"]`
          ) as HTMLElement;

          if (currentSpan && charIndex < currentWord.text.length) {
            currentSpan.textContent += currentWord.text[charIndex];
            charIndex++;
            setTimeout(typeText, typingSpeed);
          } else {
            // Move to next word
            charIndex = 0;
            wordIndex++;
            setTimeout(typeText, wordDelay);
          }
        } else {
          // Animation complete - keep cursor blinking and attach click handlers
          cursorElement?.classList.add("cursor-blink");
          attachPillarClickHandlers();
        }
      }

      function attachPillarClickHandlers() {
        const pillarWords = document.querySelectorAll(".pillar-clickable");
        pillarWords.forEach((word) => {
          word.addEventListener("click", () => {
            const pillar = (word as HTMLElement).dataset.pillar;
            if (pillar) {
              const event = new CustomEvent("open-pillar-modal", {
                detail: { pillar },
              });
              window.dispatchEvent(event);
            }
          });
        });
      }

      // Start typing animation after a brief delay
      setTimeout(() => {
        cursorElement?.classList.remove("cursor-blink");
        typeText();
      }, 300);
    }
  });
</script>
